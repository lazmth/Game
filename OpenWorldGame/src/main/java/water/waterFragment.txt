#version 400 core

in vec4 clipSpaceCoords;
in vec2 textureCoords;
in vec3 toCameraVector;
in vec3 fromLightVector;

out vec4 out_colour;

uniform sampler2D reflectionTexture;
uniform sampler2D refractionTexture;
uniform sampler2D dudvMap;
uniform sampler2D normalMap;
uniform sampler2D depthMap;
uniform vec3 lightColour;

uniform float moveFactor;

const float waveStrength = 0.01;
const float shineDamper = 20.0;
const float reflectivity = 0.3;

void main(void) {
	
	// Normalized device space coords.
	vec2 ndc = (clipSpaceCoords.xy / clipSpaceCoords.w)/2 + 0.5;
	vec2 refractTexCoords = vec2(ndc.x, ndc.y);
	// Also doing reflection in x-axis.
	vec2 reflectTexCoords = vec2(ndc.x, -ndc.y);

	// *********************** Water depth effects ***********************
	float near = 0.1;
	float far = 1000.0; 
	float depth = texture(depthMap, refractTexCoords).r;
	float floorDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	// Distance from camera to water.
	depth = gl_FragCoord.z;
	float waterDistance = 2.0 * near * far / (far + near - (2.0 * depth - 1.0) * (far - near));
	
	float waterDepth = floorDistance - waterDistance;
	
	// *******************************************************************
	
	// Old version.
	//vec2 distortion1 = (texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg * 2.0 - 1.0) * waveStrength;
	//vec2 distortion2 = (texture(dudvMap, vec2(-textureCoords.x + moveFactor, textureCoords.y + moveFactor)).rg * 2.0 - 1.0) * waveStrength;
	//vec2 totalDistortion = distortion1 + distortion2;
	
	// New version.
	// Sampling the du-dv map for our distortion.
	vec2 distortedTexCoords = texture(dudvMap, vec2(textureCoords.x + moveFactor, textureCoords.y)).rg*0.1;
	distortedTexCoords = textureCoords + vec2(distortedTexCoords.x, distortedTexCoords.y+moveFactor);
	vec2 totalDistortion = (texture(dudvMap, distortedTexCoords).rg * 2.0 - 1.0) * waveStrength * clamp(waterDepth/20.0, 0.0, 1.0);

	refractTexCoords += totalDistortion;;
	refractTexCoords = clamp(refractTexCoords, 0.001, 0.999);
	
	reflectTexCoords += totalDistortion;
	reflectTexCoords.x = clamp(reflectTexCoords.x, 0.001, 0.999);
	reflectTexCoords.y = clamp(reflectTexCoords.y, -0.999, -0.001);

	vec4 reflectColour = texture(reflectionTexture, reflectTexCoords);
	vec4 refractColour = texture(refractionTexture, refractTexCoords);
	
	// Making deeper water look murky.
	float murkyFactor = pow(1.1, waterDepth/6) - 1.2;
	murkyFactor = clamp(murkyFactor, 0.0, 1.0); 
	refractColour = mix(refractColour, vec4(0.0, 0.6, 0.8, 0.0), murkyFactor);
	
	// Extracting a normal for the fragment from the normal map.
	vec4 normalMapColour = texture(normalMap, distortedTexCoords);
	vec3 normal = vec3(normalMapColour.r * 2.0 - 1, normalMapColour.b * 3.0, normalMapColour.g * 2.0 - 1);
	normal = normalize(normal);
	
	// Fresnel effect.
	vec3 viewVector = normalize(toCameraVector);
	float refractiveFactor = dot(viewVector, normal);
	refractiveFactor = pow(refractiveFactor, 0.5);
	refractiveFactor = clamp(refractiveFactor, 0.0, 1.0);
	
	vec3 reflectedLight = reflect(normalize(fromLightVector), normal);
	float specular = max(dot(reflectedLight, viewVector), 0.0);
	specular = pow(specular, shineDamper);
	vec3 specularHighlights = lightColour * specular * reflectivity * clamp(waterDepth/20.0, 0.0, 1.0);
	
	out_colour = mix(reflectColour, refractColour, refractiveFactor);
	out_colour = mix(out_colour, vec4(0.0, 0.3, 0.5, 0.1), 0.2) + vec4(specularHighlights, 0.0);
	out_colour.a = clamp(waterDepth/5.0, 0.0, 1.0);

}