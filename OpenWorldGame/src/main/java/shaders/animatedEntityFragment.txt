#version 150

const int MAX_LIGHTS = 4;
const float ambientLight = 0.5;

in vec2 pass_textureCoords;
in vec3 pass_normal;
in vec3 toLightVector[MAX_LIGHTS];
in vec3 toCameraVector;

out vec4 out_colour;

uniform vec3 lightColour[MAX_LIGHTS];
uniform vec3 lightAttenuation[MAX_LIGHTS];
uniform float shineDamper = 1.0;
uniform float reflectivity = 0.0;
uniform sampler2D diffuseMap;

void main(void){

	vec3 unitNormal = normalize(pass_normal);
	vec3 unitToCameraVector = normalize(toCameraVector);
	
	vec3 totalDiffuse = vec3(0.0);
	vec3 totalSpecular = vec3(0.0);
	
	for(int i=0; i<MAX_LIGHTS; i++) {
		float distanceToLight = length(toLightVector[i]);
		float attenuationFactor = lightAttenuation[i].x + (lightAttenuation[i].y * distanceToLight) + (lightAttenuation[i].z * distanceToLight * distanceToLight);
			
		vec3 unitToLightVector = normalize(toLightVector[i]);
		float nDot1 = dot(unitNormal, unitToLightVector);
		float brightness = max(nDot1, 0.0);
		
		vec3 lightDirection = -unitToLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		
		float specularFactor = dot(reflectedLightDirection, unitToCameraVector);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		
		totalDiffuse =  totalDiffuse + (brightness * lightColour[i]) / attenuationFactor;
		totalSpecular = totalSpecular + (dampedFactor * reflectivity * lightColour[i]) / attenuationFactor;
	}
	
	totalDiffuse = max(totalDiffuse, ambientLight);
	
	vec4 diffuseColour = texture(diffuseMap, pass_textureCoords);
	
	out_colour = vec4(totalDiffuse, 1.0) * diffuseColour + vec4(totalSpecular, 1.0);
	
}